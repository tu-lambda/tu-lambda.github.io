#lang pollen

â—Š(require string-interpolation)

â—Š`(div ([class ,"flex bg-[@{raisin-black}]"])
  (div ([class "hidden my-2 md:flex flex-col items-center shrink-0 justify-around ml-6 lg:ml-12 xl:ml-36"])
    ,(badge "Locality of Behavior")
    (a ([href "https://nixos.org"])
      (img ([src "assets/logos/nix.png"] [class "aspect-auto w-16 lg:w-24"])))
    ,(badge "Simplicity")
    (a ([href "https://clojure.org"])
      (img ([src "assets/logos/clojure.svg"] [class "aspect-auto w-16 lg:w-24"])))
    ,(badge "Functional Optics")
    (a ([href "https://rust-lang.org"])
      (img ([src "assets/logos/ferris.svg"] [class "aspect-auto w-16 lg:w-24"])))
    ,(badge "Reproducibility")
  )
  (div ([class ,"flex flex-col justify-between mx-auto min-h-screen max-w-screen-xl px-4 pt-12 md:px-8 md:pt-20 lg:px-16 text-zinc-300"])
    (div ([class "my-6"])
      (h1 ([class ,"my-4 text-4xl text-[@{jordy}] font-fira-code tracking-tighter leading-snug text-center"])
        "Coding is hard â€”")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "Many tools and languages make it easy to add accidental complexity.")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "Accidental complexity creates unnecessary cognitive load.")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "If we constantly battle cognitive load, we get exhausted, unhappy and frustrated.")
    )
    (div ([class "my-6"])
      (h1 ([class ,"my-4 text-4xl text-[@{jordy}] font-fira-code tracking-tighter leading-snug text-center"])
        "but does it have to be " (span ([class "italic"]) "that") " hard?")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "There are tools and techniques that manage complexity well.")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "Using those tools and techniques " (span ([class "italic"]) "reduces") " cognitive load.")
      (p ([class "my-2 sm:text-lg leading-relaxed text-center"])
        "So that you can be energetic, happy and joyful while coding.")
    )
    (div ([class "mx-auto"])
      (a ([href "#content"]
          [class ,"mb-4 flex flex-col gap-2 items-center hover:text-[@{jordy}] focus-visible:text-[@{jordy}] duration-300"])
        (span ([class "text-xl text-[@{jordy}] font-fira-code tracking-tighter leading-snug"])"Interested?")
        (svg ([xmlns "http://www.w3.org/2000/svg"] [fill "none"] [viewBox "0 0 24 24"] [stroke-width "1"] [stroke "currentColor"] [class "size-16"])
          (path ([stroke-linecap "round"] [stroke-linejoin "round"] [d "m19.5 8.25-7.5 7.5-7.5-7.5"]))))
    )
  )
  (div ([class "hidden my-2 md:flex flex-col items-center shrink-0 justify-around mr-6 lg:mr-12 xl:mr-36"])
    ,(badge "Functional Data Structures")
    (a ([href "https://www.haskell.org/"])
      (img ([src "assets/logos/haskell.svg"] [class "aspect-auto w-16 lg:w-28"])))
    ,(badge "Category Theory")
    (a ([href "https://elixir-lang.org"])
      (img ([src "assets/logos/elixir.svg"] [class "aspect-auto w-16 lg:w-24"])))
    ,(badge "Distributed Systems")
    (a ([href "https://racket-lang.org"])
      (img ([src "assets/logos/racket.svg"] [class "aspect-auto w-16 lg:w-24"])))
    ,(badge "Low Coupling")
  )
)

â—Šdiv[#:class "bg-white"]{
  â—Šdiv[#:id "content" #:class "min-h-[94vh] text-zinc-700 mx-auto h-full max-w-screen-md px-6 pt-12 md:px-12 md:pt-20 lg:px-24"]{
    â—Šheading["About"]
    â—Špar{Hi ðŸ‘‹}
    â—Špar{
      We're â—Šlink["https://www.linkedin.com/in/dirk-hÃ¼sken-414b8b101"]{Dirk}, â—Šlink["https://www.linkedin.com/in/thomas-graf-253629ba"]{Thomas} and â—Šlink["https://me.beathagenlocher.com"]{Beat} and we're excited to connect and grow the functional programming community in the lovely city of TÃ¼bingen.
    }
    â—Špar{
      TÃ¼.Î»â€”Functional Programming Night TÃ¼bingen is a space for everyone interested in functional programming, whether you're a seasoned expert or just curious to learn. Each meetup features insightful talks, delicious food, and plenty of opportunities to connect with like-minded people.
    }
    â—Špar{
      Looking forward to see you at the next edition of â—Šlink["https://www.meetup.com/tu-lambda/"]{TÃ¼.Î»â€”Functional Programming Night TÃ¼bingen}!
    }
    â—Šmeetups{

      â—Šmeetup[#:title "29.10.25"]{
        â—Špar{
          The next meetup will take place on the 29.10.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{On Closures and Objects} (Beat)}
          â—Šabstract{
            â—Ša[#:href "https://wiki.c2.com/?ClosuresAndObjectsAreEquivalent" #:class "block cursor-pointer transition-all ease-in-out duration-200 hover:text-[@{jordy}]/80 border-l-4 pl-4 border-[@{jordy}]/60"]{
              â—Šp[#:class "my-2"]{
                The venerable master Qc Na was walking with his student, Anton. Hoping to prompt the master into a discussion, Anton said "Master, I have heard that objects are a very good thing - is this true?" Qc Na looked pityingly at his student and replied, "Foolish pupil - objects are merely a poor man's closures."
              }

              â—Šp[#:class "my-2"]{
                ...}
              }
            â—Šp[#:class "my-2"]{
              There's many things that enable a functional style in a program, but only one that's â—Šspan[#:class "italic"]{really} needed: Closures. â—Šbr{}
              It's a shame that still not all languages have themâ€”but lucklily, we can just write our own using Objects.
            }
            â—Šp[#:class "my-2"]{
              Same for Objects: When you really want to have a thing you can send messages to and that closes over some local state, Objects are actually a good abstraction and tool to be had in your toolkit.
              Not all languages have them, some decidedly on purposeâ€”but you make your own, too.
            }
          }
          â—Šorga{Food, talking, coding, and:}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{NixOS Install Party} (Michael, Beat)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{
              Bring your laptop, and we will install NixOS (dual-boot is fine, too :)) on it together.
            }
            â—Šp[#:class "my-2"]{
              After this session, you should:
              â—Šul[#:class "list-inside list-disc"]{
                â—Šli{Have a working NixOS install}
                â—Šli{Know how to install new packages}
                â—Šli{Know how to update your packages}
                â—Šli{Know how rebuild your OS}
                â—Šli{Know where to look when things go awry}
              }
            }
          }
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "27.08.25"]{
        â—Špar{
          This meetup took place on the 27.08.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šlink["https://github.com/marvinborner/tuela19"]{â—Šspan[#:class "font-medium"]{Recursion Schemes: Ana, Cata, Para, What?}} (Marvin)}
          â—Šabstract{
            Emerging from the depths of category theory, recursion schemes offer an elegant and efficient way to traverse recursive data structures. But how can they be used in practice? What are the differences between a catamorphism and a paramorphism? And how exactly does a futumorphism enable time travel??
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "18.06.25"]{
        â—Špar{
          The meetup took place on the 18.06.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Reader-Writer-State} (Ingo)}
          â—Šabstract{
            When do we want to return stuff?
            What context do we have?
            Can we do all of this thinking before writing our code and save a bunch of brain power?
            Let's find out.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "07.05.25"]{
        â—Špar{
          This meetup took place on the 07.05.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{Lightning Talk: â—Šspan[#:class "font-medium"]{Tail Call Optimization in JavaScript} (Thomas)}
          â—Šabstract{
          }
          â—Šp[#:class ""]{Lightning Talk: â—Šspan[#:class "font-medium"]{â—Šlink["https://haglobah.github.io/talks/2025-05-07-fluid-type-scales/"]{Fluid Type Scales}} (Beat)}
          â—Šabstract{
            Simplifying CSS: No more breakpoints, less mental workload, less typing
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{Lightning Talk: â—Šspan[#:class "font-medium"]{â—Šlink["https://tdf.cttue.de/"]{Tage der Digitalen Freiheit} | â—Šlink["https://cttue.de"]{Chaostreff}} (Alex)}
          â—Šabstract{
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "26.03.25"]{
        â—Špar{
          This meetup took place on the 26.03.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Building a Large-Scale, Streaming-Based Logging and Monitoring Solution} (Marcus)}
          â—Šabstract{
            â—Šp[#:class ""]{
              In a semiconductor fab, numerous processes play a role in manufacturing a
              microchip.  Keeping track of the manufacturing process, recording all the data
              and metrics that occur in the different steps, sending alerts when parameters
              indicate production problems, and correlating the data with the resulting
              product is essential for a successful and efficient production.
            }
            â—Šp[#:class "my-2"]{
              We show how we have built a large-scale logging and monitoring solution of a
              large and heterogenous legacy enterprise IT infrastructure that controls
              semiconductor manufacturing.  Our streaming-based system uses Riemann and
              handles more than 5,000 events per second, stores terabytes of logs and metrics
              persistently in Elasticsearch and Prometheus, and provides visualizations with
              Kibana and Grafana and real-time alerting.
            }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "15.01.25"]{
        â—Špar{
          This meetup took place on the 15.01.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{â—Šlink["https://haglobah.github.io/talks/2025-01-15-explaining-functional-programming"]{Explaining Functional Programming}} (Beat)}
          â—Šabstract{
            Most of us have been thereâ€”explaining functional programming is hard.
This talk first gathers the prerequisites for understanding functional programming and then provides a template for explaining it. In the meantime, it touches on the history of programming, programming languages, and some general concepts such as coupling and complexity.
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Lightning Talks} (Spontaneous ðŸ‘€)}
          â—Šabstract{
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "06.11.24"]{
        â—Špar{
          This meetup took place on the 06.11.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šlink["https://marvinborner.github.io/tuela24/1"]{â—Šspan[#:class "font-medium"]{Really Functional Data Structures}} (Marvin)}
          â—Šabstract{
            Last time, David showed us functional data structures in the form of persistent data structures. In this talk, I want to show you data structures that are defined entirely by functions themselves - no classes, structs, bitmaps, etc.! Knowing about such structures not only tickles the brain, but can also lead to a better intuition for solving problems functionally. Furthermore, one of the data structures shown can be used for space-efficient encodings of fractals and fun animations.
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šlink["assets/slides/2024-11-06_markus-schlegel-decoupled-by-default.pdf"]{â—Šspan[#:class "font-medium"]{Decoupled by Default â€“ Funktionale Programmierung in der Softwarearchitektur}} (Markus)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{Kopplung â€“ das MaÃŸ der AbhÃ¤ngigkeiten zwischen Modulen â€“ ist das zentrale Konzept der Softwarearchitektur. Die herkÃ¶mmliche Sicht auf Kopplung ist die, dass hohe Kopplung dann entsteht, wenn man nicht aufpasst beim Programmieren: wenn man â—Šspan[#:class "font-medium"]{nicht} gegen explizite Schnittstellen programmiert, wenn man â—Šspan[#:class "font-medium"]{kein} Visitor-Pattern verwendet, wenn man â—Šspan[#:class "font-medium"]{nicht} Dependency Injection verwendet â€¦
          }
          â—Šp[#:class "my-2"]{
            Kopplung, so scheint es, ist das Resultat von Unterlassung. Die Kopplung wieder zu senken, erfordert dann ausdrÃ¼ckliche GegenmaÃŸnahmen.
          }
          â—Šp[#:class "my-2"]{
            Dieser Vortrag zeigt eine alternative Sichtweise: Viele Arten von Kopplung entstehen aufgrund von UnzulÃ¤nglichkeiten der Programmiersprache. In funktionalen Sprachen treten diese Kopplungsarten teilweise gar nicht auf oder zumindest ist die Werkseinstellung dieser Sprachen dergestalt, dass Kopplung vermieden wird. Das zeigen wir im Vortrag insbesondere mit Blick auf den Umgang mit geteiltem Zustand und PlattformabhÃ¤ngigkeiten. Am Ende zeigen wir, dass auch funktionale Programmierer nicht automatisch vor allen Arten unnÃ¶tiger Kopplung sicher sind. Wir zeigen, wie der Ansatz des Denotational Design dort Abhilfe schaffen kann, indem die Semantik von Schnittstellen in den Vordergrund gerÃ¼ckt wird.
          }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "28.08.24"]{
        â—Špar{
          This meetup took place on the 28.08.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18.45 Doors open & Welcome}
          â—Šp{â—Šlink["https://haglobah.github.io/talks/2024-08-28/"]{â—Šspan[#:class "font-medium"]{Simple development environments with Nix}} (Beat)}
          â—Šabstract{
            Setting up development environments is more complex than it should be. Nix makes entering development environments as easy as running nix develop, making them simple and reproducible. This talk explores what an ideal workflow could look like and walks through a project setup with Nix, outlining its benefits and deficiencies.
          }
          â—Šorga{Short break}
          â—Šp{â—Šlink["https://binderdavid.github.io/talks/VortragHAMT.pdf"]{â—Šspan[#:class "font-medium"]{Persistent Data Structures: From Lists to Hashmaps}} (David)}
          â—Šabstract{
            Functional programmers cannot use the same data structures and algorithms that imperative programmers are used to. Functional data structures make it easier to reason about what our code does, but have different performance characteristics. This talk will introduce some of the basic and advanced techniques we use when we implement functional data structures efficiently.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "18.04.23"]{
        â—Špar{
          This meetup took place on the 18.04.23.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Mach Deine eigene Programmiersprache! â€“ Makros in Clojure} (Kaan Sahin)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{
              Fehlen Dir List-Comprehensions aus Python in Deiner Sprache? Findest Du C# toll wegen async? Benutz einfach Clojure und Makros, dann kannst Du diese Features einfach selbst schreiben!
            }
            â—Šp[#:class "my-2"]{
              Makros aus gÃ¤ngigen Programmiersprachen, wie beispielsweise PrÃ¤prozessormakros in C++, werden dem Makrobegriff nicht gerecht. In Clojure sind Makros ein mÃ¤chtiges Werkzeug und erlauben es, die Programmiersprache auf natÃ¼rliche Art und Weise zu erweitern. Dabei sind Makros wesentlich mehr, als einfache Syntaxerweiterungen.
            }
            â—Šp[#:class "my-2"]{
              Wir schauen uns in diesem Vortrag Clojure und dessen Makrosystem an und zeigen Beispiele aus der Praxis.
            }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "17.01.23"]{
        â—Špar{
          This meetup took place on the 17.01.23.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Komponierbare Komponenten} (Markus Schlegel)}
          â—Šabstract{
            Mit React kam die Welt der Webentwicklung zum ersten Mal mit der funktionalen Programmierung in Kontakt und war verliebt. Doch das Versprechen simpler, nachvollziehbarer Programmlogik wird bei komplexeren Anwendungen oft nicht eingelÃ¶st. Das grundlegende Problem ist, dass wir unsere ProgrammstÃ¼cke im Frontend zwar Komponenten nennen, uns aber die wichtigste Zutat aus der funktionalen Programmierung fehlt, um diese Benennung rechtfertigen zu kÃ¶nnen: Komposition. Dass es auch anders geht, zeigt dieser Vortrag.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "18.03.21"]{
        â—Špar{
          This meetup took place on the 18.03.21.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Funktionales Taktisches Design} (Michael Sperber)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{
              Funktionale Programmierung passt gut zu Domain-Driven Design (DDD): FÃ¼r funktionale Programmierer:innen bietet taktisches Design eine BrÃ¼cke zu einer funktionierenden Applikationsarchitektur. Funktionale Programmierung hingegen vereinfacht mit ihrem Fokus auf unverÃ¤nderliche Daten den Umgang mit Aggregaten.
            }
            â—Šp[#:class "my-2"]{
              Wo DDD sich auf konkrete Modelle nah an der DomÃ¤ne konzentriert, setzt funktionale Programmierung auf Abstraktion. WÃ¤hrend Abstraktion in der OO-Welt oft kritisch gesehen wird, kann sie - systematisch eingesetzt - Architektur und speziell DomÃ¤nenmodelle signifikant verbessern: Sie findet Kombinatoren in scheinbar flachen Modellen und benutzt Algebra, um die entstehenden Strukturen zu beschreiben. Heraus kommen einfachere und flexiblere Modelle als ihre konkreten Pendants, die oft vorher unbekannte Aspekte der DomÃ¤ne zutage fÃ¶rdern.
            }
            â—Šp[#:class "my-2"]{
              Der Vortrag zeigt, wie DDD um diese Techniken erweitert werden kann und wie diese zu effektiverem taktischen Design fÃ¼hren.
            }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "21.07.20"]{
        â—Špar{
          This meetup took place on the 21.07.20.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{F#} (Andreas Weizel)}
          â—Šabstract{
            Wir lernen F# kennen, eine funktionale Programmiersprache aus der Microsoft .NET Welt. Was zeichnet sie aus und in welchen Welten kann man damit unterwegs sein? Windows? Linux? Vielleicht sogar in der Web-Entwicklung?
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "21.04.20"]{
        â—Špar{
          This meetup took place on the 21.04.20.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{EinfÃ¼hrung in Elm}}
          â—Šabstract{
            Elm ist eine reine funktionale Programmiersprache mit dem Fokus sichere Webapplikationen zu schreiben.
            Bei dem Vortrag/Workshop werden wir uns die Grundlagen der Sprache anschauen und im Anschluss auch eine kleine App bauen, die mit einem Server kommuniziert.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "03.09.19"]{
        â—Špar{
          This meetup took place on the 03.09.19.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Funktionale Programmierung in Kotlin} (Aleks Dimitrov)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{
              Kotlin ist die neue, hippe JVM-Sprache mit sehr guter Java-Integration und vielen neuen Features. Aus Sicht der funktionalen Programmierung fehlt gegenÃ¼ber Scala jedoch ein richtig ausdrucksstarkes Typensystem und der Fokus auf FP.
              }
            â—Šp[#:class "my-2"]{
              Wie man mit ein paar Kniffen trotzdem sehr brauchbar selbst abstrakte Konzepte wie Applicative und Monad in Kotlin benutzen kann, und welche gewohnten FP-Konstrukte dem Kotlin-Programmierer zur VerfÃ¼gung stehen mÃ¶chte ich in diesem Vortrag vorstellen.
            }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "09.07.19"]{
        â—Špar{
          This meetup took place on the 09.07.19.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Effect Handlers} (Jona)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{
              Effects are all around us: promiment examples of (control) effects include dependencies on configuration or other modules, exceptional control flow, asynchronous calls to remote APIs, nondeterminism, probabilisitic control flow and many more.
            }
            â—Šp[#:class "my-2"]{
              Algebraic effect handlers are a promising way to structure effectful programs in a modular way. In this talk, I present the Scala library Effekt, which makes use of both the functional and object oriented features of Scala. In particular, we follow FP best practices and make the use of effects explicit in the type of a program. We also follow OO best practices and separate the effects into interfaces, programs using the interfaces and implementations of those interfaces.
            }
            â—Šp[#:class "my-2"]{
              Using Scala's features of intersection types, trait/mixin-composition, implicit parameter passing and first class modules (as objects), Effekt offers interesting extensibility properties.
            }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "05.02.19"]{
        â—Špar{
          This meetup took place on the 05.02.19.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Elixir & BEAM} (Ron Kirschler)}
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "13.11.18"]{
        â—Špar{
          This meetup took place on the 13.11.18.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Monaden} (Philipp Schuster)}
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "18.09.18"]{
        â—Špar{
          This meetup took place on the 18.09.18.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Nix(OS)} (Michael Weiss)}
          â—Šabstract{
            Nix ist ein funktionaler Paketmanager und NixOS die darauf basierende Linux-Distribution. Bei dem Vortrag geht es hauptsÃ¤chlich um die Konzepte hinter Nix(OS) um einen schnellen Ãœberblick Ã¼ber die Vor- und Nachteile zu bekommen.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "10.07.18"]{
        â—Špar{
          This meetup took place on the 10.07.18.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Pragmatic, frameworkless functional programming in Scala} (MichaÅ‚)}
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }

      â—Šmeetup[#:title "05.06.18"]{
        â—Špar{
          This meetup took place on the 05.06.18.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šp{â—Šspan[#:class "font-medium"]{Die letzte Iteration der For-Schleife (in JavaScript)}}
          â—Šorga{Short break}
          â—Šp{â—Šspan[#:class "font-medium"]{â—Šspan[#:class "italic"]{Currying} oder â—Šspan[#:class "italic"]{Wie man Funktionen Geduld beibringt}}}
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
    }

    â—Špar{
      If you want to attend the meetup, please â—Šlink["https://www.meetup.com/tu-lambda/"]{tell us about it} so that we can plan accordingly (order enough pizza!) ðŸ™‚
    }
    â—Špar{
      If you want to give a talk at one of the next meetups, please add them as an issue to this GitHub Repo â—Šlink["https://github.com/tu-lambda/planning/issues/new"]{here}.
      â—Šbr{}
      In case you need some inspiration, either take a look at all the previous talks on this website, or take a look at all the talks suggested so far â—Šlink["https://github.com/tu-lambda/planning/issues?q=is%3Aissue"]{here}.
    }
    â—Šp{
    }

    â—Šheading["Contact"]
    â—Šdiv[#:class "pb-6"]{
      â—Špar{
        Do you want to keep posted about the next event or continue the discussion? Maybe you even want to contribute a talk yourself?
      }
      â—Ša[#:href "https://matrix.to/#/#functional-programming-night-tuebingen:matrix.org" #:class "ml-4 inline-flex gap-4 items-center hover:text-[@{jordy}] focus-visible:text-[@{jordy}] duration-300"]{
        â—Šsvg[#:xmlns "http://www.w3.org/2000/svg" #:fill "none" #:viewBox "0 0 24 24" #:stroke-width "1" #:stroke "currentColor" #:class "size-8"]{
            â—Špath[#:stroke-linecap "round" #:stroke-linejoin "round" #:d "M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"]
        }
        â—Šspan[#:class "text-xl font-fira-code tracking-tighter leading-snug"]{
          Join our Matrix Room
        }
      }
    }
  }
}
